{"pageProps":{"post":{"title":"How to execute SQL queries (Select, Update, Insert, Delete) effectively using Python?","excerpt":"The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or libraries provide a lot of abstractions to make it easy for end developers to use the framework or library.","createdAt":"2021-05-03","author":{"name":"Manoj Pawar","permalink":"/authors/manoj-pawar","profilePictureUrl":"/images/manoj-pawar.jpg","slug":"manoj-pawar"},"body":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or library provide a lot of abstractions to make it easy for end developers to use the framework or library. But this abstraction most of the time cost more resource consumptions. So, I was looking for a high-level lightweight framework or library with minimum abstraction. I do not find a framework or library that suits my expectations and then I have started implementing my own library named <strong>Python-Jdbc</strong>. Let me walk you through my approach to handling the maintainability and reusability of the code with minimal abstraction.</p>\n    <p>I have defined an abstract class <code>Connector</code> which has an abstract method <code>get_connection()</code>. It acts as a database connector. We can implement the Connector class based on our database systems like MySQL, Oracle etc.</p>\n    <pre><code class=\"language-python\">class Connector:\n    def get_connection(self):\n        \"\"\"It is abstract method. The implementing class must return the connection object.\"\"\"\n        pass\n\n    @staticmethod\n    def errors_type():\n        \"\"\"It is an abstract method. The implementing class must return the class extending Exception\"\"\"\n        pass\n\n</code></pre>\n    <p>Now the most important part is to handle the database CRUD operation in a more generic way to achieve maintainability and reusability. I have defined a class <code>JdbcTemplate</code> which required constructor dependency of the <code>Connector</code> implementation class instance. It has the following methods,</p>\n    <ul>\n      <li><strong><code>query_for_tuple</code></strong>: It executes query and returns database record as a tuple.</li>\n      <li><strong><code>query_for_tuple_list</code></strong>: It executes query and returns database records as a list of tuples.</li>\n      <li><strong><code>query_for_dict</code></strong>: It executes query and returns database record as a dictionary where the key is the name of the column and value is the actual value of the column.</li>\n      <li><strong><code>query_for_dict_list</code></strong>: It executes query and returns database record as a list of dictionar, where the key is the name of the column and value is the actual value of the column.</li>\n      <li><strong><code>update</code></strong>: To execute the Insert, Update and Delete queries. It returns the last row id.</li>\n    </ul>\n    <pre><code class=\"language-python\">import logging as log\n\nfrom jdbc.connector import Connector\n\nERROR_LOG_MSG = \"error '%s' occurred while executing %s query\"\n\nclass JdbcTemplate:\n\n    def __init__(self, connector: Connector):\n        self.database_connector = connector\n\n    def query_for_tuple(self, query, parameters=()):\n        \"\"\"It executes query and returns database record as a tuple.\"\"\"\n        try:\n            connection = self.database_connector.get_connection()\n            cursor = create_and_execute_cursor(connection, query, parameters)\n            row = cursor.fetchone()\n            return row\n        except self.database_connector.errors_type() as e:\n            log.error(ERROR_LOG_MSG, e.msg, query, exc_info=True)\n            return ()\n        finally:\n            close_cursor(self.database_connector, cursor)\n            close_connection(self.database_connector, connection)\n\n    def query_for_tuple_list(self, query, parameters=()):\n        \"\"\"It executes query and returns database records as a list of tuples.\"\"\"\n        try:\n            connection = self.database_connector.get_connection()\n            cursor = create_and_execute_cursor(connection, query, parameters)\n            return cursor.fetchall()\n        except self.database_connector.errors_type() as e:\n            log.error(ERROR_LOG_MSG, e.msg, query, exc_info=True)\n            return ()\n        finally:\n            close_cursor(self.database_connector, cursor)\n            close_connection(self.database_connector, connection)\n\n    def query_for_dict(self, query, parameters=()):\n        \"\"\"It executes query and returns database record as a dictionary.\"\"\"\n        try:\n            connection = self.database_connector.get_connection()\n            cursor = create_and_execute_cursor(connection, query, parameters)\n            fields = [field_md[0] for field_md in cursor.description]\n            return dict(zip(fields, cursor.fetchone()))\n        except self.database_connector.errors_type() as e:\n            log.error(ERROR_LOG_MSG, e.msg, query, exc_info=True)\n            return ()\n        finally:\n            close_cursor(self.database_connector, cursor)\n            close_connection(self.database_connector, connection)\n\n    def query_for_dict_list(self, query, parameters=()):\n        \"\"\"It executes query and returns database record as a list of dictionary.\"\"\"\n        try:\n            connection = self.database_connector.get_connection()\n            cursor = create_and_execute_cursor(connection, query, parameters)\n            fields = [field_md[0] for field_md in cursor.description]\n            return [dict(zip(fields, row)) for row in cursor.fetchall()]\n        except self.database_connector.errors_type() as e:\n            log.error(ERROR_LOG_MSG, e.msg, query, exc_info=True)\n            return ()\n        finally:\n            close_cursor(self.database_connector, cursor)\n            close_connection(self.database_connector, connection)\n\n    def update(self, query, parameters=()):\n        \"\"\"It executes insert, update queries.\"\"\"\n        try:\n            connection = self.database_connector.get_connection()\n            cursor = create_and_execute_cursor(connection, query, parameters)\n            connection.commit()\n            return cursor.lastrowid\n        except self.database_connector.errors_type() as e:\n            log.error(ERROR_LOG_MSG, e.msg, query, exc_info=True)\n            return -1\n        finally:\n            close_cursor(self.database_connector, cursor)\n            close_connection(self.database_connector, connection)\n\n\ndef create_and_execute_cursor(connection, query, parameters):\n    cursor = connection.cursor(prepared=True)\n    if not parameters:\n        cursor.execute(query)\n    else:\n        cursor.execute(query, parameters)\n    return cursor\n\n\ndef close_connection(connector: Connector, connection):\n    \"\"\"It closes the database connection.\"\"\"\n    if connection is not None:\n        try:\n            connection.close()\n        except connector.errors_type() as e:\n            log.error(\"error occurred while closing connection \", e.msg, exc_info=True)\n\n\ndef close_cursor(connector: Connector, cursor):\n    \"\"\"It closes the database cursor\"\"\"\n    if cursor is not None:\n        try:\n            cursor.close()\n        except connector.errors_type() as e:\n            log.error(\"error occurred while closing cursor \", e.msg, exc_info=True)\n\n</code></pre>\n    <p>The <code>MySQLConnector</code> class inherits the superclass <code>Connector</code>. It provides the implements with the abstract method <code>get_connection()</code> to return the database connection.</p>\n    <pre><code class=\"language-python\">from jdbc.connector import Connector\nfrom mysql.connector.errors import Error\nfrom mysql.connector.pooling import MySQLConnectionPool, PooledMySQLConnection\n\n\nclass MySQLConnector(Connector):\n\n    def __init__(self, config, pool_name=\"default_pool\", pool_size=10):\n        self.__connPool = MySQLConnectionPool(pool_name=pool_name,\n                                              **config,\n                                              pool_size=pool_size)\n\n    def get_connection(self) -> PooledMySQLConnection:\n        \"\"\"It returns the PooledMySQLConnection object\"\"\"\n        return self.__connPool.get_connection()\n\n    @staticmethod\n    def errors_type():\n        \"\"\"It returns the mysql.connector.errors.Error\"\"\"\n        return Error\n</code></pre>\n    <p>As we see above implementation is lightweight and provides very minimal abstraction. Let's see how can use our application to perform CURD operation on the database.</p>\n    <pre><code class=\"language-python\">from jdbc.mysql_connector import MySQLConnector\nfrom jdbc.template import JdbcTemplate\n\nconfig = {\n    \"host\": \"goprogramminghub.com\",\n    \"port\": 3306,\n    \"database\": \"goprogramminghub\",\n    \"user\": \"goprogramminghub_user\",\n    \"password\": \"\"\n}\n\n# initialize MySQLConnector and JdbcTemplate once in program (in __init__.py)\nmysql_conn = MySQLConnector(config)\njdbcTemplate = JdbcTemplate(mysql_conn)\n\n# query to retrieve tuple\njdbcTemplate.query_for_tuple(\"select * from users where user_id = %s \", (1234,))\n\n# query to retrieve list of tuples\njdbcTemplate.query_for_tuple_list(\"select * from users where is_active = %s\", ('A',))\n\n# query to retrieve dictionary \njdbcTemplate.query_for_dict(\"select * from users where user_id = %s\", (1234,))\n\n# query to retrieve list of dictionary\njdbcTemplate.query_for_dict_list(\"select * from users where is_active = %s\", ('A',))\n\n# query to insert record\njdbcTemplate.update(\"Insert into users (first_nam, last_nam) values (%s, %s)\", (\"Manoj\", \"Pawar\"))\n\n# query to update record\njdbcTemplate.update(\"Update users set is_activev = %s where user_id = %s\", ('A', 1234))\n</code></pre>\n    <p>You can find the full implementation of above code in the below Github URL,</p>\n    <ul>\n      <li><a href=\"https://github.com/manojpawar94/python-jdbc\">Python-Jdbc-Github-Repo</a></li>\n    </ul>\n  </body>\n</html>\n","slug":"02-How-to-execute-sql-queries-database-using-python-effectively"},"posts":[{"title":"Introduction to Python Language","excerpt":"Python is an easy to learn, powerful, object-oriented, high-level programming language. It is created by Guido van Rossum in 1991 and further developed by the Python Software Foundation.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/python/01-Introduction-to-Python","slug":"01-Introduction-to-Python"},{"title":"How to execute SQL queries (Select, Update, Insert, Delete) effectively using Python?","excerpt":"The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or libraries provide a lot of abstractions to make it easy for end developers to use the framework or library.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/python/02-How-to-execute-sql-queries-database-using-python-effectively","slug":"02-How-to-execute-sql-queries-database-using-python-effectively"},{"title":"How to run the Python?","excerpt":"The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or libraries provide a lot of abstractions to make it easy for end developers to use the framework or library.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/python/02-how-to-run-python-code","slug":"02-how-to-run-python-code"},{"title":"How to run the Python?","excerpt":"The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or libraries provide a lot of abstractions to make it easy for end developers to use the framework or library.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/python/03-how-to-declare-variables-in-python","slug":"03-how-to-declare-variables-in-python"}]},"__N_SSG":true}