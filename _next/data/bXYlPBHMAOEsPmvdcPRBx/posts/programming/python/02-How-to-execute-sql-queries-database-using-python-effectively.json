{"pageProps":{"post":{"title":"How to execute SQL queries (Select, Update, Insert, Delete) effectively using Python?","excerpt":"The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or libraries provide a lot of abstractions to make it easy for end developers to use the framework or library.","createdAt":"2021-05-03","author":{"name":"Manoj Pawar","permalink":"/authors/manoj-pawar","profilePictureUrl":"/images/manoj-pawar.jpg","slug":"manoj-pawar"},"body":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <p>The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or library provide a lot of abstractions to make it easy for end developers to use the framework or library. But this abstraction most of the time cost more resource consumptions. So, I was looking for a high-level lightweight framework or library with minimum abstraction. I do not find a framework or library that suits my expectations and then I have started implementing my own library named <strong>Python-Jdbc</strong>. Let me walk you through my approach to handling the maintainability and reusability of the code with minimal abstraction.</p>\n    <p>I have defined an abstract class <code>Connector</code> which has an abstract method <code>get_connection()</code>. It acts as a database connector. We can implement the Connector class based on our database systems like MySQL, Oracle etc.</p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Connector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_connection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It is abstract method. The implementing class must return the connection object.\"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">errors_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It is an abstract method. The implementing class must return the class extending Exception\"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n</code></pre>\n    </div>\n    <p>Now the most important part is to handle the database CRUD operation in a more generic way to achieve maintainability and reusability. I have defined a class <code>JdbcTemplate</code> which required constructor dependency of the <code>Connector</code> implementation class instance. It has the following methods,</p>\n    <ul>\n      <li><strong><code>query_for_tuple</code></strong>: It executes query and returns database record as a tuple.</li>\n      <li><strong><code>query_for_tuple_list</code></strong>: It executes query and returns database records as a list of tuples.</li>\n      <li><strong><code>query_for_dict</code></strong>: It executes query and returns database record as a dictionary where the key is the name of the column and value is the actual value of the column.</li>\n      <li><strong><code>query_for_dict_list</code></strong>: It executes query and returns database record as a list of dictionar, where the key is the name of the column and value is the actual value of the column.</li>\n      <li><strong><code>update</code></strong>: To execute the Insert, Update and Delete queries. It returns the last row id.</li>\n    </ul>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> logging <span class=\"token keyword\">as</span> log\n\n<span class=\"token keyword\">from</span> jdbc<span class=\"token punctuation\">.</span>connector <span class=\"token keyword\">import</span> Connector\n\nERROR_LOG_MSG <span class=\"token operator\">=</span> <span class=\"token string\">\"error '%s' occurred while executing %s query\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcTemplate</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> connector<span class=\"token punctuation\">:</span> Connector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>database_connector <span class=\"token operator\">=</span> connector\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query_for_tuple</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It executes query and returns database record as a tuple.\"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            connection <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cursor <span class=\"token operator\">=</span> create_and_execute_cursor<span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span>\n            row <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>fetchone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> row\n        <span class=\"token keyword\">except</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>ERROR_LOG_MSG<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            close_cursor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span>\n            close_connection<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query_for_tuple_list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It executes query and returns database records as a list of tuples.\"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            connection <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cursor <span class=\"token operator\">=</span> create_and_execute_cursor<span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> cursor<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>ERROR_LOG_MSG<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            close_cursor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span>\n            close_connection<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query_for_dict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It executes query and returns database record as a dictionary.\"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            connection <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cursor <span class=\"token operator\">=</span> create_and_execute_cursor<span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span>\n            fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>field_md<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> field_md <span class=\"token keyword\">in</span> cursor<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">.</span>fetchone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>ERROR_LOG_MSG<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            close_cursor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span>\n            close_connection<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">query_for_dict_list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It executes query and returns database record as a list of dictionary.\"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            connection <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cursor <span class=\"token operator\">=</span> create_and_execute_cursor<span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span>\n            fields <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>field_md<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> field_md <span class=\"token keyword\">in</span> cursor<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> cursor<span class=\"token punctuation\">.</span>fetchall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">except</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>ERROR_LOG_MSG<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            close_cursor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span>\n            close_connection<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It executes insert, update queries.\"\"\"</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            connection <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            cursor <span class=\"token operator\">=</span> create_and_execute_cursor<span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span>\n            connection<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> cursor<span class=\"token punctuation\">.</span>lastrowid\n        <span class=\"token keyword\">except</span> self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>ERROR_LOG_MSG<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            close_cursor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span>\n            close_connection<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>database_connector<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_and_execute_cursor</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cursor <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span>prepared<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> parameters<span class=\"token punctuation\">:</span>\n        cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cursor\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">close_connection</span><span class=\"token punctuation\">(</span>connector<span class=\"token punctuation\">:</span> Connector<span class=\"token punctuation\">,</span> connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"It closes the database connection.\"\"\"</span>\n    <span class=\"token keyword\">if</span> connection <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            connection<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"error occurred while closing connection \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">close_cursor</span><span class=\"token punctuation\">(</span>connector<span class=\"token punctuation\">:</span> Connector<span class=\"token punctuation\">,</span> cursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"It closes the database cursor\"\"\"</span>\n    <span class=\"token keyword\">if</span> cursor <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> connector<span class=\"token punctuation\">.</span>errors_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            log<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"error occurred while closing cursor \"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">,</span> exc_info<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n    </div>\n    <p>The <code>MySQLConnector</code> class inherits the superclass <code>Connector</code>. It provides the implements with the abstract method <code>get_connection()</code> to return the database connection.</p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> jdbc<span class=\"token punctuation\">.</span>connector <span class=\"token keyword\">import</span> Connector\n<span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>errors <span class=\"token keyword\">import</span> Error\n<span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>pooling <span class=\"token keyword\">import</span> MySQLConnectionPool<span class=\"token punctuation\">,</span> PooledMySQLConnection\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MySQLConnector</span><span class=\"token punctuation\">(</span>Connector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> pool_name<span class=\"token operator\">=</span><span class=\"token string\">\"default_pool\"</span><span class=\"token punctuation\">,</span> pool_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>__connPool <span class=\"token operator\">=</span> MySQLConnectionPool<span class=\"token punctuation\">(</span>pool_name<span class=\"token operator\">=</span>pool_name<span class=\"token punctuation\">,</span>\n                                              <span class=\"token operator\">**</span>config<span class=\"token punctuation\">,</span>\n                                              pool_size<span class=\"token operator\">=</span>pool_size<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_connection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> PooledMySQLConnection<span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It returns the PooledMySQLConnection object\"\"\"</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>__connPool<span class=\"token punctuation\">.</span>get_connection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">errors_type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"It returns the mysql.connector.errors.Error\"\"\"</span>\n        <span class=\"token keyword\">return</span> Error\n</code></pre>\n    </div>\n    <p>As we see above implementation is lightweight and provides very minimal abstraction. Let's see how can use our application to perform CURD operation on the database.</p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> jdbc<span class=\"token punctuation\">.</span>mysql_connector <span class=\"token keyword\">import</span> MySQLConnector\n<span class=\"token keyword\">from</span> jdbc<span class=\"token punctuation\">.</span>template <span class=\"token keyword\">import</span> JdbcTemplate\n\nconfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"host\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"goprogramminghub.com\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"port\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"database\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"goprogramminghub\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"goprogramminghub_user\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># initialize MySQLConnector and JdbcTemplate once in program (in __init__.py)</span>\nmysql_conn <span class=\"token operator\">=</span> MySQLConnector<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\njdbcTemplate <span class=\"token operator\">=</span> JdbcTemplate<span class=\"token punctuation\">(</span>mysql_conn<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query to retrieve tuple</span>\njdbcTemplate<span class=\"token punctuation\">.</span>query_for_tuple<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from users where user_id = %s \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query to retrieve list of tuples</span>\njdbcTemplate<span class=\"token punctuation\">.</span>query_for_tuple_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from users where is_active = %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query to retrieve dictionary </span>\njdbcTemplate<span class=\"token punctuation\">.</span>query_for_dict<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from users where user_id = %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query to retrieve list of dictionary</span>\njdbcTemplate<span class=\"token punctuation\">.</span>query_for_dict_list<span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from users where is_active = %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query to insert record</span>\njdbcTemplate<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert into users (first_nam, last_nam) values (%s, %s)\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Manoj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pawar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># query to update record</span>\njdbcTemplate<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token string\">\"Update users set is_activev = %s where user_id = %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n    </div>\n    <p>You can find the full implementation of above code in the below Github URL,</p>\n    <ul>\n      <li><a href=\"https://github.com/manojpawar94/python-jdbc\">Python-Jdbc-Github-Repo</a></li>\n    </ul>\n  </body>\n</html>\n","slug":"02-How-to-execute-sql-queries-database-using-python-effectively"},"posts":[{"title":"Introduction to Python Language","excerpt":"Python is an easy to learn, powerful, object-oriented, high-level programming language. It is created by Guido van Rossum in 1991 and further developed by the Python Software Foundation.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/python/01-Introduction-to-Python","slug":"01-Introduction-to-Python"},{"title":"How to execute SQL queries (Select, Update, Insert, Delete) effectively using Python?","excerpt":"The database is an integral part of most software applications. We always try to find out what is the best way to connect to the database. Often use readily available frameworks. The one thing I have experienced often frameworks or libraries provide a lot of abstractions to make it easy for end developers to use the framework or library.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/python/02-How-to-execute-sql-queries-database-using-python-effectively","slug":"02-How-to-execute-sql-queries-database-using-python-effectively"},{"title":"How to run the hello world program in the python?","excerpt":"Python is an interpreted programming language. We can run the Python code in the interactive mode or using the source code file.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/python/02-how-to-run-python-code","slug":"02-how-to-run-python-code"}]},"__N_SSG":true}