{"pageProps":{"post":{"title":"LeetCode 02 : Add Two Numbers","excerpt":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list","createdAt":"2021-05-03","author":{"name":"GoProgrammingHub","permalink":"/authors/manoj-pawar","profilePictureUrl":"/images/manoj-pawar.jpg","slug":"manoj-pawar"},"body":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h4>Problem</h4>\n    <p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n    <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n    <h5>Example 1:</h5><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\">\n    <br/>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Input:<span class=\"token space\"> </span>l1<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">2,4</span>,3<span class=\"token punctuation\">]</span>,<span class=\"token space\"> </span>l2<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">5,6</span>,4<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Output:<span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">7,0</span>,8<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Explanation:<span class=\"token space\"> </span><span class=\"token number\">342</span><span class=\"token space\"> </span>+<span class=\"token space\"> </span><span class=\"token number\">465</span><span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token number\">807</span>.Output:<span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0,1</span><span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Explanation:<span class=\"token space\"> </span>Because<span class=\"token space\"> </span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token space\"> </span>+<span class=\"token space\"> </span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token space\"> </span><span class=\"token operator\">==</span><span class=\"token space\"> </span><span class=\"token number\">9</span>,<span class=\"token space\"> </span>we<span class=\"token space\"> </span><span class=\"token builtin class-name\">return</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span>,<span class=\"token space\"> </span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.\n</code></pre>\n    </div>\n    <h5>Example 2:</h5>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Input:<span class=\"token space\"> </span>l1<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,<span class=\"token space\"> </span>l2<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Output:<span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre>\n    </div>\n    <h5>Example 3:</h5>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Input:<span class=\"token space\"> </span>l1<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">9,9</span>,9,9,9,9,9<span class=\"token punctuation\">]</span>,<span class=\"token space\"> </span>l2<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">9,9</span>,9,9<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Output:<span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">8,9</span>,9,9,0,0,0,1<span class=\"token punctuation\">]</span>\n</code></pre>\n    </div>\n    <h5>Constraints</h5>\n    <blockquote>\n      <ul>\n        <li>The number of nodes in each linked list is in the range [1, 100].</li>\n        <li>0 &#x3C;= Node.val &#x3C;= 9</li>\n        <li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n      </ul>\n    </blockquote>\n    <h4>Solution</h4><ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n  <li class=\"nav-item\" role=\"presentation\">\n    <button class=\"nav-link active\" id=\"home-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#home\" type=\"button\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Java</button>\n  </li>\n</ul>\n<div class=\"tab-content\" id=\"myTabContent\">\n  <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n    <div class=\"remark-highlight\">\n      <pre class=\"language-java  line-numbers\"><code class=\"language-java\"><span class=\"token doc-comment comment\">/**<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span>Definition<span class=\"token space\"> </span>for<span class=\"token space\"> </span>singly-linked<span class=\"token space\"> </span>list.<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span>public<span class=\"token space\"> </span>class<span class=\"token space\"> </span>ListNode<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>int<span class=\"token space\"> </span>val;<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>ListNode<span class=\"token space\"> </span>next;<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>ListNode()<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>ListNode(int<span class=\"token space\"> </span>val)<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token space\"> </span>this.val<span class=\"token space\"> </span>=<span class=\"token space\"> </span>val;<span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>ListNode(int<span class=\"token space\"> </span>val,<span class=\"token space\"> </span>ListNode<span class=\"token space\"> </span>next)<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token space\"> </span><span class=\"token space\"> </span>this.val<span class=\"token space\"> </span>=<span class=\"token space\"> </span>val;<span class=\"token space\"> </span>this.next<span class=\"token space\"> </span>=<span class=\"token space\"> </span>next;<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*<span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span>*/</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span></span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">class</span><span class=\"token space\"> </span><span class=\"token class-name\">Solution</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">public</span><span class=\"token space\"> </span><span class=\"token class-name\">ListNode</span><span class=\"token space\"> </span><span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token space\"> </span>l1<span class=\"token punctuation\">,</span><span class=\"token space\"> </span><span class=\"token class-name\">ListNode</span><span class=\"token space\"> </span>l2<span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">int</span><span class=\"token space\"> </span>carry<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token class-name\">ListNode</span><span class=\"token space\"> </span>head<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token class-name\">ListNode</span><span class=\"token space\"> </span>intermediate<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1<span class=\"token space\"> </span><span class=\"token operator\">!=</span><span class=\"token space\"> </span><span class=\"token keyword\">null</span><span class=\"token space\"> </span><span class=\"token operator\">||</span><span class=\"token space\"> </span>l2<span class=\"token space\"> </span><span class=\"token operator\">!=</span><span class=\"token space\"> </span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">int</span><span class=\"token space\"> </span>sum<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>carry<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1<span class=\"token space\"> </span><span class=\"token operator\">!=</span><span class=\"token space\"> </span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>sum<span class=\"token space\"> </span><span class=\"token operator\">+=</span><span class=\"token space\"> </span>l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>l1<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2<span class=\"token space\"> </span><span class=\"token operator\">!=</span><span class=\"token space\"> </span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>sum<span class=\"token space\"> </span><span class=\"token operator\">+=</span><span class=\"token space\"> </span>l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>l2<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>carry<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>sum<span class=\"token space\"> </span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token class-name\">ListNode</span><span class=\"token space\"> </span>node<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token keyword\">new</span><span class=\"token space\"> </span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token space\"> </span><span class=\"token operator\">%</span><span class=\"token space\"> </span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">if</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>head<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>intermediate<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>node<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token space\"> </span><span class=\"token keyword\">else</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>intermediate<span class=\"token punctuation\">.</span>next<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>node<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>intermediate<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>intermediate<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">if</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span>carry<span class=\"token space\"> </span><span class=\"token operator\">></span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>intermediate<span class=\"token punctuation\">.</span>next<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token keyword\">new</span><span class=\"token space\"> </span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">return</span><span class=\"token space\"> </span>head<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>The above solution is for adding two numbers that are represented as linked lists, where each node in the linked list contains a single digit of the number. The solution uses a straightforward approach to iterate through both linked lists and perform the addition, considering the carry value. Here's how the code works:</p>\n    <ol>\n      <li>The <code class=\"language-unknown\">addTwoNumbers</code> function takes two linked list inputs <code class=\"language-unknown\">l1</code> and <code class=\"language-unknown\">l2</code>, which represent the two numbers to be added.</li>\n      <li>It initializes variables <code class=\"language-unknown\">carry</code>, <code class=\"language-unknown\">head</code>, and <code class=\"language-unknown\">intermediate</code>.</li>\n      <li>The loop iterates while either <code class=\"language-unknown\">l1</code> or <code class=\"language-unknown\">l2</code> has more digits or there's a carry value.</li>\n      <li>Inside the loop:\n        <ul>\n          <li>It calculates the sum of the digits along with the carry value.</li>\n          <li>Creates a new node with the least significant digit of the sum and potentially the carry from the previous step.</li>\n          <li>Updates the <code class=\"language-unknown\">intermediate</code> node's <code class=\"language-unknown\">next</code> pointer to the newly created node.</li>\n          <li>Moves to the next digit in both <code class=\"language-unknown\">l1</code> and <code class=\"language-unknown\">l2</code> if they exist.</li>\n          <li>Updates the <code class=\"language-unknown\">carry</code> for the next iteration.</li>\n        </ul>\n      </li>\n      <li>After the loop, if there's still a carry left, it creates an additional node to represent it.</li>\n      <li>The <code class=\"language-unknown\">head</code> node is returned, which points to the beginning of the resulting linked list.</li>\n    </ol>\n    <p>This code effectively performs the addition of two numbers represented as linked lists while considering carry values. It constructs the resulting linked list digit by digit and handles the carry properly.</p>\n    <p>Please note that you need to make sure the <code class=\"language-unknown\">ListNode</code> class is defined properly and imported.</p></div>\n</div>\n  </body>\n</html>\n","slug":"02-LeetCode-02-Problem-Add-Two-Numbers"},"posts":[{"title":"LeetCode 01 : Two Sum","excerpt":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/01-LeetCode-01-Problem-Two-Sum","index":0,"slug":"01-LeetCode-01-Problem-Two-Sum"},{"title":"LeetCode 02 : Add Two Numbers","excerpt":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/02-LeetCode-02-Problem-Add-Two-Numbers","index":1,"slug":"02-LeetCode-02-Problem-Add-Two-Numbers"},{"title":"LeetCode 03 : Longest Substring Without Repeating Characters","excerpt":"Given a string s, find the length of the longest substring without repeating characters.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/03-LeetCode-03-Problem-Longest-Substring-Without-Repeating-Characters","index":2,"slug":"03-LeetCode-03-Problem-Longest-Substring-Without-Repeating-Characters"},{"title":"LeetCode 04 : Container With Most Water","excerpt":"You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/04-LeetCode-04-Problem-Container-With-Most-Water","index":3,"slug":"04-LeetCode-04-Problem-Container-With-Most-Water"},{"title":"LeetCode 05 : Remove Duplicates from Sorted Array","excerpt":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/05-LeetCode-05-Problem-Remove-Duplicates-from-Sorted-Array","index":4,"slug":"05-LeetCode-05-Problem-Remove-Duplicates-from-Sorted-Array"},{"title":"LeetCode 06 : Maximum Subarray","excerpt":"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/06-LeetCode-06-Problem-Maximum-Subarray","index":5,"slug":"06-LeetCode-06-Problem-Maximum-Subarray"},{"title":"LeetCode 07 : Contains Duplicate","excerpt":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/07-LeetCode-07-Problem-Contains-Duplicate","index":6,"slug":"07-LeetCode-07-Problem-Contains-Duplicate"},{"title":"Codechef 01 : Problem Code: AGELIMIT","excerpt":"Chef wants to appear in a competitive exam. To take the exam, there are following requirements, Minimum age limit is X and Age should be strictly less than Y","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/08-Codechef-01-problem-solviong-AGELIMIT","index":7,"slug":"08-Codechef-01-problem-solviong-AGELIMIT"},{"title":"Codechef 02 : Problem Code: BURGERS","excerpt":"Chef is fond of burgers and decided to make as many burgers as possible. Chef has A patties and B buns. To make 1 burger, Chef needs 1 patty and 1 bun. Find the maximum number of burgers that Chef can make.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/09-Codechef-02-problem-solviong-BURGERS","index":8,"slug":"09-Codechef-02-problem-solviong-BURGERS"}],"index":2},"__N_SSG":true}