{"pageProps":{"post":{"title":"LeetCode 05 : Remove Duplicates from Sorted Array","excerpt":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.","createdAt":"2021-05-03","author":{"name":"Manoj Pawar","permalink":"/authors/manoj-pawar","profilePictureUrl":"/images/manoj-pawar.jpg","slug":"manoj-pawar"},"body":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <h4>Problem</h4>\n    <p>Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.</p>\n    <p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.</p>\n    <p>Return k after placing the final result in the first k slots of nums.</p>\n    <p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.</p>\n    <h5>Custom Judge:</h5>\n    <p>The judge will test your solution with the following code:</p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token space\"> </span>nums<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Input<span class=\"token space\"> </span>array</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token space\"> </span>expectedNums<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>The<span class=\"token space\"> </span>expected<span class=\"token space\"> </span>answer<span class=\"token space\"> </span>with<span class=\"token space\"> </span>correct<span class=\"token space\"> </span>length</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">int</span><span class=\"token space\"> </span>k<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Calls<span class=\"token space\"> </span>your<span class=\"token space\"> </span>implementation</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>assert<span class=\"token space\"> </span>k<span class=\"token space\"> </span><span class=\"token operator\">==</span><span class=\"token space\"> </span>expectedNums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">for</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token space\"> </span>i<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>i<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;</span><span class=\"token space\"> </span>k<span class=\"token punctuation\">;</span><span class=\"token space\"> </span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>assert<span class=\"token space\"> </span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token space\"> </span><span class=\"token operator\">==</span><span class=\"token space\"> </span>expectedNums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span>\n</code></pre>\n    </div>\n    <p>If all assertions pass, then your solution will be accepted.</p>\n    <h5>Example 1:</h5>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Input:<span class=\"token space\"> </span>nums<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">1,1</span>,2<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Output:<span class=\"token space\"> </span><span class=\"token number\">2</span>,<span class=\"token space\"> </span>nums<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,_<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Explanation:<span class=\"token space\"> </span>Your<span class=\"token space\"> </span><span class=\"token keyword\">function</span><span class=\"token space\"> </span>should<span class=\"token space\"> </span><span class=\"token builtin class-name\">return</span><span class=\"token space\"> </span>k<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token number\">2</span>,<span class=\"token space\"> </span>with<span class=\"token space\"> </span>the<span class=\"token space\"> </span>first<span class=\"token space\"> </span>two<span class=\"token space\"> </span>elements<span class=\"token space\"> </span>of<span class=\"token space\"> </span>nums<span class=\"token space\"> </span>being<span class=\"token space\"> </span><span class=\"token number\">1</span><span class=\"token space\"> </span>and<span class=\"token space\"> </span><span class=\"token number\">2</span><span class=\"token space\"> </span>respectively.<span class=\"token lf\"></span>\n<span class=\"token lf\"></span>It<span class=\"token space\"> </span>does<span class=\"token space\"> </span>not<span class=\"token space\"> </span>matter<span class=\"token space\"> </span>what<span class=\"token space\"> </span>you<span class=\"token space\"> </span>leave<span class=\"token space\"> </span>beyond<span class=\"token space\"> </span>the<span class=\"token space\"> </span>returned<span class=\"token space\"> </span>k<span class=\"token space\"> </span><span class=\"token punctuation\">(</span>hence<span class=\"token space\"> </span>they<span class=\"token space\"> </span>are<span class=\"token space\"> </span>underscores<span class=\"token punctuation\">)</span>.\n</code></pre>\n    </div>\n    <h5>Example 2:</h5>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-shell\"><code class=\"language-shell\">Input:<span class=\"token space\"> </span>nums<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0,0</span>,1,1,1,2,2,3,3,4<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Output:<span class=\"token space\"> </span><span class=\"token number\">5</span>,<span class=\"token space\"> </span>nums<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token number\">0,1</span>,2,3,4,_,_,_,_,_<span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span>Explanation:<span class=\"token space\"> </span>Your<span class=\"token space\"> </span><span class=\"token keyword\">function</span><span class=\"token space\"> </span>should<span class=\"token space\"> </span><span class=\"token builtin class-name\">return</span><span class=\"token space\"> </span>k<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token number\">5</span>,<span class=\"token space\"> </span>with<span class=\"token space\"> </span>the<span class=\"token space\"> </span>first<span class=\"token space\"> </span>five<span class=\"token space\"> </span>elements<span class=\"token space\"> </span>of<span class=\"token space\"> </span>nums<span class=\"token space\"> </span>being<span class=\"token space\"> </span><span class=\"token number\">0</span>,<span class=\"token space\"> </span><span class=\"token number\">1</span>,<span class=\"token space\"> </span><span class=\"token number\">2</span>,<span class=\"token space\"> </span><span class=\"token number\">3</span>,<span class=\"token space\"> </span>and<span class=\"token space\"> </span><span class=\"token number\">4</span><span class=\"token space\"> </span>respectively.<span class=\"token lf\"></span>\n<span class=\"token lf\"></span>It<span class=\"token space\"> </span>does<span class=\"token space\"> </span>not<span class=\"token space\"> </span>matter<span class=\"token space\"> </span>what<span class=\"token space\"> </span>you<span class=\"token space\"> </span>leave<span class=\"token space\"> </span>beyond<span class=\"token space\"> </span>the<span class=\"token space\"> </span>returned<span class=\"token space\"> </span>k<span class=\"token space\"> </span><span class=\"token punctuation\">(</span>hence<span class=\"token space\"> </span>they<span class=\"token space\"> </span>are<span class=\"token space\"> </span>underscores<span class=\"token punctuation\">)</span>.\n</code></pre>\n    </div>\n    <h5>Constraints</h5>\n    <blockquote>\n      <ul>\n        <li>1 &#x3C;= nums.length &#x3C;= 3 * 10^4</li>\n        <li>-100 &#x3C;= nums[i] &#x3C;= 100</li>\n        <li>nums is sorted in non-decreasing order.</li>\n      </ul>\n    </blockquote>\n    <h4>Solution</h4><ul class=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n  <li class=\"nav-item\" role=\"presentation\">\n    <button class=\"nav-link active\" id=\"home-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#home\" type=\"button\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Go Lang</button>\n  </li>\n</ul>\n<div class=\"tab-content\" id=\"myTabContent\">\n  <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>nums<span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token builtin\">int</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>checking<span class=\"token space\"> </span>the<span class=\"token space\"> </span>duplicate<span class=\"token space\"> </span>element</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span>length<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>length<span class=\"token space\"> </span><span class=\"token operator\">==</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token keyword\">return</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span>numOfDuplicate<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span>lastNum<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>nums<span class=\"token punctuation\">[</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span>isPresent<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token boolean\">false</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span>value<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">for</span><span class=\"token space\"> </span>index<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>index<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;</span><span class=\"token space\"> </span>length<span class=\"token punctuation\">;</span><span class=\"token space\"> </span>index<span class=\"token operator\">++</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>value<span class=\"token space\"> </span><span class=\"token operator\">></span><span class=\"token space\"> </span>lastNum<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span>numOfDuplicate<span class=\"token operator\">++</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token keyword\">for</span><span class=\"token space\"> </span><span class=\"token operator\">!</span>isPresent<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">for</span><span class=\"token space\"> </span>itr<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>index<span class=\"token punctuation\">;</span><span class=\"token space\"> </span>itr<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;</span><span class=\"token space\"> </span>length<span class=\"token punctuation\">;</span><span class=\"token space\"> </span>itr<span class=\"token operator\">++</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>nums<span class=\"token punctuation\">[</span>itr<span class=\"token punctuation\">]</span><span class=\"token space\"> </span><span class=\"token operator\">==</span><span class=\"token space\"> </span>value<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span>isPresent<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token boolean\">true</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">break</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>isPresent<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">break</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token space\"> </span><span class=\"token keyword\">else</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span>value<span class=\"token operator\">++</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>value<span class=\"token space\"> </span><span class=\"token operator\">></span><span class=\"token space\"> </span>lastNum<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token keyword\">break</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>isPresent<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span>nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span>value<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token tab\">\t</span>value<span class=\"token operator\">++</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token tab\">\t</span>isPresent<span class=\"token space\"> </span><span class=\"token operator\">=</span><span class=\"token space\"> </span><span class=\"token boolean\">false</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>nums<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">return</span><span class=\"token space\"> </span>length<span class=\"token space\"> </span><span class=\"token operator\">-</span><span class=\"token space\"> </span>numOfDuplicate<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>The above solution is for the \"Remove Duplicates from Sorted Array\" problem. It removes duplicate elements from a sorted integer array in-place and returns the new length of the array after removing the duplicates. Here's how the code works:</p>\n    <ol>\n      <li>The <code class=\"language-unknown\">removeDuplicates</code> function takes a slice of integers <code class=\"language-unknown\">nums</code> as input and returns an integer representing the new length of the array after removing duplicates.</li>\n      <li>It first checks if the length of the array is 0, in which case it returns 0 since there are no elements to process.</li>\n      <li>The variables <code class=\"language-unknown\">numOfDuplicate</code>, <code class=\"language-unknown\">lastNum</code>, <code class=\"language-unknown\">isPresent</code>, and <code class=\"language-unknown\">value</code> are initialized.</li>\n      <li>The loop iterates through the array, and for each element:\n        <ul>\n          <li>If <code class=\"language-unknown\">value</code> is greater than <code class=\"language-unknown\">lastNum</code>, it means that there are no more valid elements to consider, so the current element is set to 0, and <code class=\"language-unknown\">numOfDuplicate</code> is incremented.</li>\n          <li>A nested loop (<code class=\"language-unknown\">for !isPresent</code>) searches for the next valid value that is not a duplicate. If found, <code class=\"language-unknown\">isPresent</code> is set to true and the loop breaks.</li>\n          <li>If <code class=\"language-unknown\">isPresent</code> is true, the current element is set to <code class=\"language-unknown\">value</code>, and <code class=\"language-unknown\">value</code> is incremented.</li>\n        </ul>\n      </li>\n      <li>Finally, the function prints the modified array and returns the length of the array after removing duplicates (<code class=\"language-unknown\">length - numOfDuplicate</code>).</li>\n    </ol>\n    <p>The solution primarily relies on the logic to remove duplicates by iterating through the array and keeping track of the current value to be assigned to valid elements. It follows the in-place requirement by modifying the array directly.</p>\n    <p>Please note that the provided solution can be optimized further and there are more concise ways to achieve the same result using Go's features.</p></div>\n</div>\n    <blockquote>\n      <p><strong>Original Problem:</strong> <a href=\"https://leetcode.com/problems/maximum-subarray/\">https://leetcode.com/problems/maximum-subarray/</a></p>\n    </blockquote>\n  </body>\n</html>\n","slug":"05-LeetCode-05-Problem-Remove-Duplicates-from-Sorted-Array"},"posts":[{"title":"LeetCode 01 : Two Sum","excerpt":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/01-LeetCode-01-Problem-Two-Sum","index":0,"slug":"01-LeetCode-01-Problem-Two-Sum"},{"title":"LeetCode 02 : Add Two Numbers","excerpt":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/02-LeetCode-02-Problem-Add-Two-Numbers","index":1,"slug":"02-LeetCode-02-Problem-Add-Two-Numbers"},{"title":"LeetCode 03 : Longest Substring Without Repeating Characters","excerpt":"Given a string s, find the length of the longest substring without repeating characters.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/03-LeetCode-03-Problem-Longest-Substring-Without-Repeating-Characters","index":2,"slug":"03-LeetCode-03-Problem-Longest-Substring-Without-Repeating-Characters"},{"title":"LeetCode 04 : Container With Most Water","excerpt":"You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/04-LeetCode-04-Problem-Container-With-Most-Water","index":3,"slug":"04-LeetCode-04-Problem-Container-With-Most-Water"},{"title":"LeetCode 05 : Remove Duplicates from Sorted Array","excerpt":"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/05-LeetCode-05-Problem-Remove-Duplicates-from-Sorted-Array","index":4,"slug":"05-LeetCode-05-Problem-Remove-Duplicates-from-Sorted-Array"},{"title":"LeetCode 06 : Maximum Subarray","excerpt":"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/06-LeetCode-06-Problem-Maximum-Subarray","index":5,"slug":"06-LeetCode-06-Problem-Maximum-Subarray"},{"title":"LeetCode 07 : Contains Duplicate","excerpt":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/07-LeetCode-07-Problem-Contains-Duplicate","index":6,"slug":"07-LeetCode-07-Problem-Contains-Duplicate"},{"title":"Codechef 01 : Problem Code: AGELIMIT","excerpt":"Chef wants to appear in a competitive exam. To take the exam, there are following requirements, Minimum age limit is X and Age should be strictly less than Y","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/08-Codechef-01-problem-solviong-AGELIMIT","index":7,"slug":"08-Codechef-01-problem-solviong-AGELIMIT"},{"title":"Codechef 02 : Problem Code: BURGERS","excerpt":"Chef is fond of burgers and decided to make as many burgers as possible. Chef has A patties and B buns. To make 1 burger, Chef needs 1 patty and 1 bun. Find the maximum number of burgers that Chef can make.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/problemsolving/09-Codechef-02-problem-solviong-BURGERS","index":8,"slug":"09-Codechef-02-problem-solviong-BURGERS"}],"index":5},"__N_SSG":true}