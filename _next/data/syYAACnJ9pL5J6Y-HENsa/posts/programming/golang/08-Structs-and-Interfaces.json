{"pageProps":{"post":{"title":"Structs and Interfaces","excerpt":"Learn about struct types and how they facilitate structured data organization. Grasp the concept of interfaces and their role in achieving polymorphism in Go.","createdAt":"2021-05-03","author":{"name":"Manoj Pawar","permalink":"/authors/manoj-pawar","profilePictureUrl":"/images/manoj-pawar.jpg","slug":"manoj-pawar"},"body":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <blockquote>\n      <p>Unveiling Structs and Harnessing Interfaces in Go</p>\n    </blockquote>\n    <p>Welcome to Chapter 8! In this chapter, we're going to delve deep into two powerful concepts in Go programming: structs and interfaces. Structs help you organize related data, while interfaces enable polymorphism and flexible interactions between different types. By the end of this chapter, you'll not only understand the intricacies of structs and interfaces but also learn how to utilize them effectively with hands-on examples.</p>\n    <h4>8.1: Structuring Data with Structs</h4>\n    <p>Imagine you're designing a blueprint for a house. Structs in Go are like these blueprints, allowing you to define your own data types with named fields for structured data organization.</p>\n    <p><strong>Example 1: Creating and Using Structs</strong></p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span><span class=\"token space\"> </span>main<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token string\">\"fmt\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token comment\">//<span class=\"token space\"> </span>Define<span class=\"token space\"> </span>a<span class=\"token space\"> </span>struct</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">type</span><span class=\"token space\"> </span>Person<span class=\"token space\"> </span><span class=\"token keyword\">struct</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>FirstName<span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>LastName<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Age<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token builtin\">int</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Create<span class=\"token space\"> </span>a<span class=\"token space\"> </span>new<span class=\"token space\"> </span>instance<span class=\"token space\"> </span>of<span class=\"token space\"> </span>Person</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>person<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>Person<span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>FirstName<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>LastName<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Age<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Access<span class=\"token space\"> </span>struct<span class=\"token space\"> </span>fields</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First<span class=\"token space\"> </span>Name:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last<span class=\"token space\"> </span>Name:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>LastName<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Age:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>In this example, the <code class=\"language-unknown\">Person</code> struct is defined with fields for <code class=\"language-unknown\">FirstName</code>, <code class=\"language-unknown\">LastName</code>, and <code class=\"language-unknown\">Age</code>. We create an instance of <code class=\"language-unknown\">Person</code> with the provided values and access its fields using dot notation.</p>\n    <h4>Achieving Polymorphism with Interfaces</h4>\n    <p>Interfaces in Go are like contracts that define behavior. They allow different types to fulfill the same contract, enabling polymorphism and flexible code design.</p>\n    <p><strong>Example 2: Implementing Interfaces</strong></p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span><span class=\"token space\"> </span>main<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token string\">\"fmt\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token comment\">//<span class=\"token space\"> </span>Define<span class=\"token space\"> </span>an<span class=\"token space\"> </span>interface</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">type</span><span class=\"token space\"> </span>Speaker<span class=\"token space\"> </span><span class=\"token keyword\">interface</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token comment\">//<span class=\"token space\"> </span>Define<span class=\"token space\"> </span>types<span class=\"token space\"> </span>that<span class=\"token space\"> </span>implement<span class=\"token space\"> </span>the<span class=\"token space\"> </span>interface</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">type</span><span class=\"token space\"> </span>Human<span class=\"token space\"> </span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span>h<span class=\"token space\"> </span>Human<span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">return</span><span class=\"token space\"> </span><span class=\"token string\">\"Hello,<span class=\"token space\"> </span>I'm<span class=\"token space\"> </span>a<span class=\"token space\"> </span>human.\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">type</span><span class=\"token space\"> </span>Dog<span class=\"token space\"> </span><span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span>d<span class=\"token space\"> </span>Dog<span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">return</span><span class=\"token space\"> </span><span class=\"token string\">\"Woof,<span class=\"token space\"> </span>I'm<span class=\"token space\"> </span>a<span class=\"token space\"> </span>dog.\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Create<span class=\"token space\"> </span>instances<span class=\"token space\"> </span>of<span class=\"token space\"> </span>different<span class=\"token space\"> </span>types</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>john<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>Human<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fido<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>Dog<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Use<span class=\"token space\"> </span>the<span class=\"token space\"> </span>same<span class=\"token space\"> </span>function<span class=\"token space\"> </span>with<span class=\"token space\"> </span>different<span class=\"token space\"> </span>types</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token function\">speakAndPrint</span><span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token function\">speakAndPrint</span><span class=\"token punctuation\">(</span>fido<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">speakAndPrint</span><span class=\"token punctuation\">(</span>speaker<span class=\"token space\"> </span>Speaker<span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>speaker<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>In this example, an <code class=\"language-unknown\">interface</code> named <code class=\"language-unknown\">Speaker</code> is defined with a single method <code class=\"language-unknown\">Speak()</code>. Both <code class=\"language-unknown\">Human</code> and <code class=\"language-unknown\">Dog</code> types implement this interface by providing their implementations of the <code class=\"language-unknown\">Speak()</code> method. The <code class=\"language-unknown\">speakAndPrint</code> function takes a parameter of type <code class=\"language-unknown\">Speaker</code> and calls the <code class=\"language-unknown\">Speak()</code> method on it.</p>\n    <h4>Composition with Structs</h4>\n    <p>Structs can be composed of other structs, allowing you to build complex data structures with ease.</p>\n    <p><strong>Example 3: Struct Composition</strong></p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span><span class=\"token space\"> </span>main<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token string\">\"fmt\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token comment\">//<span class=\"token space\"> </span>Define<span class=\"token space\"> </span>simple<span class=\"token space\"> </span>structs</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">type</span><span class=\"token space\"> </span>Address<span class=\"token space\"> </span><span class=\"token keyword\">struct</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Street<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>City<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>ZipCode<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">type</span><span class=\"token space\"> </span>Person<span class=\"token space\"> </span><span class=\"token keyword\">struct</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>FirstName<span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>LastName<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Address<span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Address<span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Embedding<span class=\"token space\"> </span>Address<span class=\"token space\"> </span>struct</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>person<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>Person<span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>FirstName<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>LastName<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Address<span class=\"token punctuation\">:</span><span class=\"token space\"> </span>Address<span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>Street<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"123<span class=\"token space\"> </span>Main<span class=\"token space\"> </span>St\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>City<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"Springfield\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>ZipCode<span class=\"token punctuation\">:</span><span class=\"token space\"> </span><span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>LastName<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>Street<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>City<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>person<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">.</span>ZipCode<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>In this example, the <code class=\"language-unknown\">Person</code> struct is composed of the <code class=\"language-unknown\">Address</code> struct. By embedding the <code class=\"language-unknown\">Address</code> struct within <code class=\"language-unknown\">Person</code>, we create a hierarchical structure that allows us to access address fields through the <code class=\"language-unknown\">person.Address</code> notation.</p>\n    <p>By mastering the art of structs and interfaces, you'll have the tools to organize structured data efficiently and enable flexible interactions between different types. These concepts are fundamental to building modular and adaptable Go programs.</p>\n  </body>\n</html>\n","slug":"08-Structs-and-Interfaces"},"posts":[{"title":"Introduction to Go Language","excerpt":"Understand the origins and motivations behind the creation of GoLang. Set up your development environment with the necessary tools and components.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/01-Introduction-to-Go-Language","index":0,"slug":"01-Introduction-to-Go-Language"},{"title":"Getting Acquainted with Go","excerpt":"Explore the basic syntax and structure of Go programs. Learn how to write your first \"Hello, World!\" program.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/02-Getting-Acquainted-with-Go","index":1,"slug":"02-Getting-Acquainted-with-Go"},{"title":"Variables and Data Types","excerpt":"Grasp the concept of variables and their role in programming. Discover the various data types available in GoLang and how to use them effectively.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/03-Variables-and-Data-Types","index":2,"slug":"03-Variables-and-Data-Types"},{"title":"Control Structures","excerpt":"Dive into control structures like loops and conditional statements. Learn how to manipulate program flow to achieve desired outcomes.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/04-Control-Structures","index":3,"slug":"04-Control-Structures"},{"title":"Functions","excerpt":"Understand the significance of functions in Go programming. Learn how to define and use functions to organize and streamline your code.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/05-Functions","index":4,"slug":"05-Functions"},{"title":"Packages and Libraries","excerpt":"Explore the modular nature of GoLang through packages and libraries. Learn how to import and utilize external code to enhance your programs.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/06-Packages-and-Libraries","index":5,"slug":"06-Packages-and-Libraries"},{"title":"Pointers and Memory Management","excerpt":"Delve into the concepts of pointers and memory management in Go. Understand how Go's memory allocation works and how to work with pointers effectively.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/07-Pointers-and-Memory-Management","index":6,"slug":"07-Pointers-and-Memory-Management"},{"title":"Structs and Interfaces","excerpt":"Learn about struct types and how they facilitate structured data organization. Grasp the concept of interfaces and their role in achieving polymorphism in Go.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/08-Structs-and-Interfaces","index":7,"slug":"08-Structs-and-Interfaces"},{"title":"Concurrency","excerpt":"Understand Go's unique approach to concurrency through goroutines and channels. Learn how to create concurrent programs that leverage the full power of modern hardware. ","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/09-Concurrency","index":8,"slug":"09-Concurrency"},{"title":"Error Handling","excerpt":"Explore techniques for handling errors and exceptional scenarios in GoLang. Learn how to design robust code that gracefully manages unexpected situations.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/10-Error-Handling","index":9,"slug":"10-Error-Handling"},{"title":"File Handling","excerpt":"Discover how to work with files and I/O operations in Go. Learn how to read from and write to files, enhancing the functionality of your programs.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/11-File-Handling","index":10,"slug":"11-File-Handling"},{"title":"Advanced Topics","excerpt":"Explore more advanced topics such as reflection, embedding, and advanced concurrency patterns. This chapter offers a glimpse into the broader capabilities of GoLang for those looking to deepen their expertise.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/12-Advanced-Topics","index":11,"slug":"12-Advanced-Topics"}],"index":8},"__N_SSG":true}