{"pageProps":{"post":{"title":"Concurrency","excerpt":"Understand Go's unique approach to concurrency through goroutines and channels. Learn how to create concurrent programs that leverage the full power of modern hardware. ","createdAt":"2021-05-03","author":{"name":"Manoj Pawar","permalink":"/authors/manoj-pawar","profilePictureUrl":"/images/manoj-pawar.jpg","slug":"manoj-pawar"},"body":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  </head>\n  <body>\n    <blockquote>\n      <p>Harnessing Concurrency with Goroutines and Channels in Go</p>\n    </blockquote>\n    <p>Welcome to Concurrency Tutorial! In this chapter, we're going to delve into the fascinating world of concurrency in Go programming. Go's approach to concurrency is unique and powerful, utilizing goroutines and channels to enable efficient parallelism. By the end of this chapter, you'll not only comprehend the fundamentals of concurrency but also learn how to create highly efficient concurrent programs using goroutines and channels.</p>\n    <h4>Unveiling Goroutines - The Building Blocks of Concurrency</h4>\n    <p>Imagine you're multitasking - cooking, answering emails, and reading a book all at once. Goroutines in Go are like these parallel tasks, allowing you to execute multiple functions concurrently.</p>\n    <p><strong>Example 1: Creating and Running Goroutines</strong></p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span><span class=\"token space\"> </span>main<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"fmt\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"time\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">printNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">for</span><span class=\"token space\"> </span>i<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>i<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;=</span><span class=\"token space\"> </span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>i<span class=\"token operator\">++</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>i<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token space\"> </span><span class=\"token operator\">*</span><span class=\"token space\"> </span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Introduce<span class=\"token space\"> </span>a<span class=\"token space\"> </span>delay</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">printLetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">for</span><span class=\"token space\"> </span>char<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>char<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;=</span><span class=\"token space\"> </span><span class=\"token char\">'e'</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>char<span class=\"token operator\">++</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Letter:\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token space\"> </span><span class=\"token operator\">*</span><span class=\"token space\"> </span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Introduce<span class=\"token space\"> </span>a<span class=\"token space\"> </span>delay</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">go</span><span class=\"token space\"> </span><span class=\"token function\">printNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Start<span class=\"token space\"> </span>a<span class=\"token space\"> </span>goroutine<span class=\"token space\"> </span>for<span class=\"token space\"> </span>printNumbers</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">go</span><span class=\"token space\"> </span><span class=\"token function\">printLetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Start<span class=\"token space\"> </span>a<span class=\"token space\"> </span>goroutine<span class=\"token space\"> </span>for<span class=\"token space\"> </span>printLetters</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Wait<span class=\"token space\"> </span>for<span class=\"token space\"> </span>a<span class=\"token space\"> </span>while<span class=\"token space\"> </span>to<span class=\"token space\"> </span>see<span class=\"token space\"> </span>the<span class=\"token space\"> </span>output</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token space\"> </span><span class=\"token operator\">*</span><span class=\"token space\"> </span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>In this example, the <code class=\"language-unknown\">printNumbers</code> and <code class=\"language-unknown\">printLetters</code> functions are executed concurrently using goroutines. The <code class=\"language-unknown\">go</code> keyword is used to start goroutines. As a result, the numbers and letters are printed interleaved due to the concurrent execution.</p>\n    <h4>Synchronizing Goroutines with Channels</h4>\n    <p>Imagine you're coordinating a team of chefs in a restaurant kitchen. Channels in Go are like communication pathways that enable synchronization and data sharing between goroutines.</p>\n    <p><strong>Example 2: Using Channels for Communication</strong></p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span><span class=\"token space\"> </span>main<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"fmt\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"time\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">sendGreetings</span><span class=\"token punctuation\">(</span>channel<span class=\"token space\"> </span><span class=\"token keyword\">chan</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>message<span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>channel<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;-</span><span class=\"token space\"> </span>message<span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Send<span class=\"token space\"> </span>message<span class=\"token space\"> </span>to<span class=\"token space\"> </span>the<span class=\"token space\"> </span>channel</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>greetingsChannel<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Create<span class=\"token space\"> </span>a<span class=\"token space\"> </span>channel</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">go</span><span class=\"token space\"> </span><span class=\"token function\">sendGreetings</span><span class=\"token punctuation\">(</span>greetingsChannel<span class=\"token punctuation\">,</span><span class=\"token space\"> </span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">go</span><span class=\"token space\"> </span><span class=\"token function\">sendGreetings</span><span class=\"token punctuation\">(</span>greetingsChannel<span class=\"token punctuation\">,</span><span class=\"token space\"> </span><span class=\"token string\">\"Bonjour!\"</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">go</span><span class=\"token space\"> </span><span class=\"token function\">sendGreetings</span><span class=\"token punctuation\">(</span>greetingsChannel<span class=\"token punctuation\">,</span><span class=\"token space\"> </span><span class=\"token string\">\"Hola!\"</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token comment\">//<span class=\"token space\"> </span>Receive<span class=\"token space\"> </span>and<span class=\"token space\"> </span>print<span class=\"token space\"> </span>messages<span class=\"token space\"> </span>from<span class=\"token space\"> </span>the<span class=\"token space\"> </span>channel</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;-</span>greetingsChannel<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;-</span>greetingsChannel<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;-</span>greetingsChannel<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>In this example, the <code class=\"language-unknown\">sendGreetings</code> function sends messages to the <code class=\"language-unknown\">greetingsChannel</code> using the <code class=\"language-unknown\">channel &#x26;lt;-</code> syntax. In the <code class=\"language-unknown\">main()</code> function, we receive and print messages from the channel using the <code class=\"language-unknown\">&#x26;lt;-channel</code> syntax.</p>\n    <h4>Leveraging Concurrency for Efficiency</h4>\n    <p>Concurrency allows you to take advantage of modern hardware and parallelize tasks for improved performance.</p>\n    <p><strong>Example 3: Concurrent URL Fetching</strong></p>\n    <div class=\"remark-highlight\">\n      <pre class=\"language-go  line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">package</span><span class=\"token space\"> </span>main<span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">import</span><span class=\"token space\"> </span><span class=\"token punctuation\">(</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"fmt\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"net/http\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"time\"</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">fetchURL</span><span class=\"token punctuation\">(</span>url<span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>channel<span class=\"token space\"> </span><span class=\"token keyword\">chan</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>response<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>err<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span>http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">if</span><span class=\"token space\"> </span>err<span class=\"token space\"> </span><span class=\"token operator\">==</span><span class=\"token space\"> </span><span class=\"token boolean\">nil</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>channel<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;-</span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fetched<span class=\"token space\"> </span>%s:<span class=\"token space\"> </span>%d<span class=\"token space\"> </span>bytes\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>url<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>response<span class=\"token punctuation\">.</span>ContentLength<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token space\"> </span><span class=\"token keyword\">else</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>channel<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;-</span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error<span class=\"token space\"> </span>fetching<span class=\"token space\"> </span>%s:<span class=\"token space\"> </span>%s\"</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>url<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>err<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token keyword\">func</span><span class=\"token space\"> </span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>urls<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"<a href=\"https://www.goprogramminghub.com\" class=\"token url-link\">https://www.goprogramminghub.com</a>\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"<a href=\"https://www.github.com\" class=\"token url-link\">https://www.github.com</a>\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token string\">\"<a href=\"https://www.google.com\" class=\"token url-link\">https://www.google.com</a>\"</span><span class=\"token punctuation\">,</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>resultChannel<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span><span class=\"token space\"> </span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">for</span><span class=\"token space\"> </span><span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span><span class=\"token space\"> </span>url<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token keyword\">range</span><span class=\"token space\"> </span>urls<span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">go</span><span class=\"token space\"> </span><span class=\"token function\">fetchURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token space\"> </span>resultChannel<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token keyword\">for</span><span class=\"token space\"> </span>i<span class=\"token space\"> </span><span class=\"token operator\">:=</span><span class=\"token space\"> </span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>i<span class=\"token space\"> </span><span class=\"token operator\">&#x3C;</span><span class=\"token space\"> </span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token space\"> </span>i<span class=\"token operator\">++</span><span class=\"token space\"> </span><span class=\"token punctuation\">{</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;-</span>resultChannel<span class=\"token punctuation\">)</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token space\"> </span><span class=\"token punctuation\">}</span><span class=\"token lf\"></span>\n<span class=\"token lf\"></span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span><span class=\"\"></span></span>\n</code></pre>\n    </div>\n    <p>In this example, multiple URLs are fetched concurrently using goroutines. The fetched information or error messages are sent to the <code class=\"language-unknown\">resultChannel</code> and then printed sequentially as they are received.</p>\n    <p>By mastering concurrency with goroutines and channels, you'll be equipped to create highly efficient and responsive programs that can fully utilize the power of modern hardware. Concurrency is a cornerstone of scalable software development and is vital for building applications that can handle a high level of parallelism.</p>\n  </body>\n</html>\n","slug":"09-Concurrency"},"posts":[{"title":"Introduction to Go Language","excerpt":"Understand the origins and motivations behind the creation of GoLang. Set up your development environment with the necessary tools and components.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/01-Introduction-to-Go-Language","index":0,"slug":"01-Introduction-to-Go-Language"},{"title":"Getting Acquainted with Go","excerpt":"Explore the basic syntax and structure of Go programs. Learn how to write your first \"Hello, World!\" program.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/02-Getting-Acquainted-with-Go","index":1,"slug":"02-Getting-Acquainted-with-Go"},{"title":"Variables and Data Types","excerpt":"Grasp the concept of variables and their role in programming. Discover the various data types available in GoLang and how to use them effectively.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/03-Variables-and-Data-Types","index":2,"slug":"03-Variables-and-Data-Types"},{"title":"Control Structures","excerpt":"Dive into control structures like loops and conditional statements. Learn how to manipulate program flow to achieve desired outcomes.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/04-Control-Structures","index":3,"slug":"04-Control-Structures"},{"title":"Functions","excerpt":"Understand the significance of functions in Go programming. Learn how to define and use functions to organize and streamline your code.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/05-Functions","index":4,"slug":"05-Functions"},{"title":"Packages and Libraries","excerpt":"Explore the modular nature of GoLang through packages and libraries. Learn how to import and utilize external code to enhance your programs.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/06-Packages-and-Libraries","index":5,"slug":"06-Packages-and-Libraries"},{"title":"Pointers and Memory Management","excerpt":"Delve into the concepts of pointers and memory management in Go. Understand how Go's memory allocation works and how to work with pointers effectively.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/07-Pointers-and-Memory-Management","index":6,"slug":"07-Pointers-and-Memory-Management"},{"title":"Structs and Interfaces","excerpt":"Learn about struct types and how they facilitate structured data organization. Grasp the concept of interfaces and their role in achieving polymorphism in Go.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/08-Structs-and-Interfaces","index":7,"slug":"08-Structs-and-Interfaces"},{"title":"Concurrency","excerpt":"Understand Go's unique approach to concurrency through goroutines and channels. Learn how to create concurrent programs that leverage the full power of modern hardware. ","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/09-Concurrency","index":8,"slug":"09-Concurrency"},{"title":"Error Handling","excerpt":"Explore techniques for handling errors and exceptional scenarios in GoLang. Learn how to design robust code that gracefully manages unexpected situations.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/10-Error-Handling","index":9,"slug":"10-Error-Handling"},{"title":"File Handling","excerpt":"Discover how to work with files and I/O operations in Go. Learn how to read from and write to files, enhancing the functionality of your programs.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/11-File-Handling","index":10,"slug":"11-File-Handling"},{"title":"Advanced Topics","excerpt":"Explore more advanced topics such as reflection, embedding, and advanced concurrency patterns. This chapter offers a glimpse into the broader capabilities of GoLang for those looking to deepen their expertise.","createdAt":"2021-05-03","author":"manoj-pawar","permalink":"/posts/programming/golang/12-Advanced-Topics","index":11,"slug":"12-Advanced-Topics"}],"index":9},"__N_SSG":true}